# AUTOGENERATED! DO NOT EDIT! File to edit: 01_knots.ipynb (unless otherwise specified).

__all__ = ['BIDS_input', 'bfiles_input', 'atlas_input', 'mask_input', 'pipeline']

# Cell
#export
import os

from .core import *

from nipype import IdentityInterface, Function
from nipype.interfaces.io import SelectFiles
from nipype.pipeline import Node

# Cell
def BIDS_input(subject_list, sub_dir = 'data'):
    """
    Create input data source as Nipype nodes
    Arguments:
        subjects_list : list of subjects in BIDS directory, output of `get_subs` function
        sub_dir       : path to BIDS folder with subjects sub-folders
    Returns:
        sub_source : Nipype node of subject iterables
        selectfiles: Nipype node of iterated subject's files
    """
    # create iterable that sweeps all subjects:
    sub_source = Node(IdentityInterface(fields = ['subject_id']), name = 'data_source')
    sub_source.iterables = [('subject_id', subject_list)]

    # Select files based on BIDS structure template:
    dwi_file = os.path.join('sub-{subject_id}', 'ses-*', 'dwi', 'sub-{subject_id}_ses-*_dwi.nii.gz')
    bv_files = os.path.join('sub-{subject_id}', 'ses-1', 'dwi', 'sub-{subject_id}_ses-1_dwi.bv*')
    templates = {'dwi': dwi_file, 'bvs': bv_files}
    # then create Node:
    select_files = Node(SelectFiles(templates, base_directory = sub_dir), name ='selectfiles')

    return sub_source, select_files

# Cell
def bfiles_input(BIDS_layout):
    """
    Create Nipype node for bfiles data input
    """
    bfiles_getter = Node(Function(input_names=['BIDS_layout'], output_names=['out_path'], function = get_bfiles), name = 'get_bfiles')

    return bfiles_getter

# Cell
def atlas_input(atlas_dir, atlas_names):
    """
    Create Nipype node for selecting atlas images in `atlas_dir`, the node will iterate over `atlas_names`
    Arguments:
        atlas_dir (str): path to folder containing atlas volumes
        atlas_names (List): List of strings matching the file names of each atlas you'd like to use
    """
    atlas_source = Node(IdentityInterface(fields = ['atlas_name']), name = 'atlas_source')
    atlas_source.iterables = [('atlas_name', atlas_names)]
    atlas_template = {'atlas': atlas_dir + '{file_name}'}
    select_atlas = Node(SelectFiles(template), name = 'select_atlas')
    select_atlas.base_directory = atlas_dir

    return atlas_source, select_atlas

# Cell
def mask_input():

    return mask_tuple_getter

# Cell
class pipeline():

