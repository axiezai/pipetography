# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['get_subs', 'get_bfiles', 'dwidenoiseInputSpec', 'dwidenoiseOutputSpec', 'dwidenoise',
           'N4BiasFieldCorrectionInputSpec', 'N4BiasFieldCorrectionOutputSpec', 'N4BiasFieldCorrection',
           'dwipreprocInputSpec', 'dwipreprocOutputSpec', 'dwipreproc', 'mask2seedtuple']

# Cell
#export
import os, sys
from nipype.interfaces.base import CommandLine, CommandLineInputSpec, File
from nipype.interfaces.base import TraitedSpec, traits
from nipype.interfaces.io import DataSink, BIDSDataGrabber
from bids.layout import BIDSLayout

# Cell
def get_subs(sub_dir = 'data'):
    """
    Gets list of subjects in a BIDS directory, by default it looks in "data" folder in your CWD
    Input str of path to BIDS dir otherwise
    """
    print('Creating layout of data directory, might take a while if there are a lot of subjects')
    layout = BIDSLayout(sub_dir)
    sub_list = layout.get_subjects()
    return sub_list, layout

# Cell
def get_bfiles(BIDS_layout):
    """
    read .bvec and .bval files in as a list and spit out tuple for nipype input
    """
    bvs = layout.get(subject = sub_list[0], suffix = 'dwi', session = 1, extensions = ['bvec', 'bval'], return_type = 'file')
    bvs_tuple = tuple(bvs)[::-1]
    return bvs_tuple

# Cell
class dwidenoiseInputSpec(CommandLineInputSpec):
    """
    Specifying inputs to dwidenoise
    """
    in_file = File(exists=True, mandatory=True, argstr = '%s', position = 1, desc = 'input image')
    noise = File(mandatory=True, argstr = '-noise %s', position = 2, desc = 'output noise map')
    out_file = File(mandatory = True, argstr = '%s', position = -1, desc = 'output denoised image')
    quiet = traits.Str(argstr = '%s', position = 3, desc = 'suppress verbose outputs')
    force = traits.Str(argstr = '%s', position = 4, desc = 'force output file if the file already exits')
    nthreads = traits.Int(argstr = '-nthreads %d', position = 5, desc = 'use this number of threads')

class dwidenoiseOutputSpec(TraitedSpec):
    """
    Specifying outputs of dwidenoise
    """
    noise = File(argstr = '%s', desc = 'output noise level map')
    out_file = File(argstr = '%s', desc = 'output denoised file')

class dwidenoise(CommandLine):
    """
    Denoise DWI data with mrtrix3's dwidenoise.
    This should be performed as the first step of the preprocessing pipeline!
    Arguments:
        in_file (str): Input DWI image
        noise (str): output noise map
        out_file (str): output denoised image
        quiet (str): whether we should suppress output
        force (str): replace existing image (overwrite past runs outputs)
        nthreads (int): number of threads to use
    """
    _cmd = 'dwidenoise'
    input_spec = dwidenoiseInputSpec
    output_spec = dwidenoiseOutputSpec

    def _list_outputs(self):
        outputs = self.output_spec().get()
        outputs['noise'] = os.path.abspath(self.inputs.noise)
        outputs['out_file'] = os.path.abspath(self.inputs.out_file)
        return outputs

# Cell
class N4BiasFieldCorrectionInputSpec(CommandLineInputSpec):
    """
    Input specifications
    """
    in_file = File(exists=True, mandatory=True, argstr='-i %s',
                  position = 1, desc = 'input denoised file')
    dims = traits.Int(mandatory = True, argstr = '-d %d',
                     position = 0, desc = 'dimension of input image')
    out_file = File(mandatory=True, argstr='-o %s', position = 2,
                         desc = 'the output image')

class N4BiasFieldCorrectionOutputSpec(TraitedSpec):
    """
    Output specifications
    """
    out_file = File(desc = 'output denoised and bias corrected file')

class N4BiasFieldCorrection(CommandLine):
    """
    ANTs Bias field correction.
    Arguments:
        in_file (str) = input file, for the pipeline, connect the denoised dwi file here
        dims (int)    = input volume dimensions, for dwi's the value is 4
        outfile (str) = name of output file, for pipeline, connect this to datasink and next step
    Returns:
        out_file (str) = .nii.gz file output, bias field corrected image
    """
    _cmd = 'N4BiasFieldCorrection'
    input_spec = N4BiasFieldCorrectionInputSpec
    output_spec = N4BiasFieldCorrectionOutputSpec

    def _list_outputs(self):
        outputs = self.output_spec().get()
        outputs['out_file'] = os.path.abspath(self.inputs.out_file)
        # Get the attribute saved during _run_interface
        return outputs

# Cell
class dwipreprocInputSpec(CommandLineInputSpec):
    in_file = File(exists=True, mandatory = True, argstr='%s',
                  position = 0, desc = 'input denoised, corrected file')
    rpe_options = traits.Str(mandatory = True, argstr = '%s', position = 2,
                            desc = 'acquisition phase-encoding design')
    pe_dir = traits.Str(mandatory = True, argstr = '-pe_dir %s', position = 3,
                       desc = 'phase encoding direction')
    eddy_options = traits.Str(mandatory = False, argstr = '-eddy_options %s', position = 4,
                             desc = 'eddy command options within quotation marks and contains at least one space')
    nthreads = traits.Int(mandatory = False, argstr = '-nthreads %d', position = 5,
                            desc = 'number of available CPUs to use, no input means all available CPUs')
    grad_fsl = traits.Tuple((traits.Str, traits.Str), mandatory=True, argstr = '-fslgrad %s %s',
                           position = 6, desc = 'provide gradient table in fsl format')
    out_file = File(mandatory = True, argstr='%s', position = 1,
                       desc = 'output denoised, corrected, preproc image')

class dwipreprocOutputSpec(TraitedSpec):
    out_file = File(argstr='%s', desc = 'output denoised, corrected, preproc image')

class dwipreproc(CommandLine):
    """
    mrtrix3 dwipreproc for motion/eddy current correction
    Arguments:
        in_file (str): input file that needs the artifact correction
        rpe_options (str): phase-encoding design, see mrtrix3's dwipreproc for detail options
        pe_dir (str): phase encoding directions, see mrtrix3's dwipreproc for detail options
        eddy_options (str): eddy current correction options. see mrtrix3's dwipreproc for detail options
        nthreads (int): number of threads used
        grad_fsl (tuple): bvec/bval files
        out_file (str): file name and path for output
    Returns:
        out_file (str): preprocessed file, this is the input to tractography.
    """
    _cmd = 'dwipreproc'
    input_spec = dwipreprocInputSpec
    output_spec = dwipreprocOutputSpec

    def _list_outputs(self):
        outputs = self.output_spec().get()
        outputs['out_file']=os.path.abspath(self.inputs.out_file)
        return outputs

# Cell
def mask2seedtuple(mask_file, grid_size):
    seed_grid_tuple = (mask_file, grid_size,)
    return seed_grid_tuple