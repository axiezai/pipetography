# AUTOGENERATED! DO NOT EDIT! File to edit: pipetography.ipynb (unless otherwise specified).

__all__ = ['bfiles2tuple', 'dwidenoiseInputSpec', 'dwidenoiseOutputSpec', 'dwidenoise',
           'N4BiasFieldCorrectionInputSpec', 'N4BiasFieldCorrectionOutputSpec', 'N4BiasFieldCorrection',
           'mask2seedtuple']

# Cell
import os, sys

from nipype.interfaces.base import CommandLine, CommandLineInputSpec, File
from nipype.interfaces.base import TraitedSpec, traits
from nipype.interfaces.io import SelectFiles, DataSink, BIDSDataGrabber
from bids.layout import BIDSLayout

# Cell
def bfiles2tuple(in_List):
    """
    read .bvec and .bval files in as a list and spit out tuple for nipype input
    """
    bvs_tuple = tuple(in_List)[::-1]
    return bvs_tuple

# Cell
class dwidenoiseInputSpec(CommandLineInputSpec):
    in_file = File(exists=True, mandatory=True, argstr = '%s', position = 1, desc = 'input image')
    noise = File(mandatory=True, argstr = '-noise %s', position = 2, desc = 'output noise map')
    out_file = File(mandatory = True, argstr = '%s', position = -1, desc = 'output denoised image')
    quiet = traits.Str(argstr = '%s', position = 3, desc = 'suppress verbose outputs')
    force = traits.Str(argstr = '%s', position = 4, desc = 'force output file if the file already exits')
    nthreads = traits.Int(argstr = '-nthreads %d', position = 5, desc = 'use this number of threads')

class dwidenoiseOutputSpec(TraitedSpec):
    noise = File(argstr = '%s', desc = 'output noise level map')
    out_file = File(argstr = '%s', desc = 'output denoised file')

class dwidenoise(CommandLine):
    _cmd = 'dwidenoise'
    input_spec = dwidenoiseInputSpec
    output_spec = dwidenoiseOutputSpec

    def _list_outputs(self):
        outputs = self.output_spec().get()
        outputs['noise'] = os.path.abspath(self.inputs.noise)
        outputs['out_file'] = os.path.abspath(self.inputs.out_file)
        return outputs

# Cell
class N4BiasFieldCorrectionInputSpec(CommandLineInputSpec):
    """
    ANTs Bias field correction.
    Arguments:
        in_file (str) = input file, for the pipeline, connect the denoised dwi file here
        dims (int)    = input volume dimensions, for dwi's the value is 4
        outfile (str) = name of output file, for pipeline, connect this to datasink and next step
    Returns:
        out_file (str) = .nii.gz file output, bias field corrected image
    """
    in_file = File(exists=True, mandatory=True, argstr='-i %s',
                  position = 1, desc = 'input denoised file')
    dims = traits.Int(mandatory = True, argstr = '-d %d',
                     position = 0, desc = 'dimension of input image')
    out_file = File(mandatory=True, argstr='-o %s', position = 2,
                         desc = 'the output image')

class N4BiasFieldCorrectionOutputSpec(TraitedSpec):
    out_file = File(desc = 'output denoised and bias corrected file')

class N4BiasFieldCorrection(CommandLine):
    _cmd = 'N4BiasFieldCorrection'
    input_spec = N4BiasFieldCorrectionInputSpec
    output_spec = N4BiasFieldCorrectionOutputSpec

    def _list_outputs(self):
        outputs = self.output_spec().get()
        outputs['out_file'] = os.path.abspath(self.inputs.out_file)
        # Get the attribute saved during _run_interface
        return outputs

# Cell
from nipype.interfaces.mrtrix3.utils import DWIExtract, MRMath
from nipype.interfaces import fsl

### Extract B0 volumes from

# Cell
def mask2seedtuple(mask_file, grid_size):
    """
    convert mask file into appropriate input tuple for nipype node
    """
    seed_grid_tuple = (mask_file, grid_size,)
    return seed_grid_tuple